<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[Bevy-3] 使用批次檔快速開啟 Bevy 專案</title>
      <link href="/2025/09/29/bevy-open-project-bat/"/>
      <url>/2025/09/29/bevy-open-project-bat/</url>
      
        <content type="html"><![CDATA[<p>在前兩篇文章中，我們已經學會了如何在 Windows 上安裝開發環境，並建立一個新的 <strong>Bevy 專案</strong>。<br>這一篇，我們要一起加一點小自動化：用 <strong>批次檔 (Batch file)</strong> 讓我們只要雙擊捷徑，就能在 VS Code 中打開 Bevy 專案。</p><hr><span id="more"></span><blockquote><p>🎮 系列文章：  </p><ul><li><a href="/2025/09/29/bevy-setup-windows/">Part 1：Windows 上 Bevy 開發環境前置安裝教學 (CMD)</a>  </li><li><a href="/2025/09/29/bevy-create-project/">Part 2：使用 CMD 在 Windows 上建立第一個 Bevy 專案</a>  </li><li><a href="/2025/09/29/bevy-open-project-bat/">Part 3：使用批次檔快速開啟 Bevy 專案</a></li></ul></blockquote><hr><h2 id="為什麼要用批次檔？"><a href="#為什麼要用批次檔？" class="headerlink" title="為什麼要用批次檔？"></a>為什麼要用批次檔？</h2><p>假設我們的 Bevy 專案名稱是 <strong>my_bevy_game</strong>，存放在 <code>E:\BevyProject\my_bevy_game</code>。<br>如果要打開這個專案，原本需要這樣操作：</p><ol><li><p>按 <strong>Win + R</strong>，輸入 <code>cmd</code> 開啟命令提示字元。  </p></li><li><p>輸入以下指令切換到專案資料夾：  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d E:\BevyProject\my_bevy_game</span><br></pre></td></tr></table></figure></li><li><p>再輸入以下指令開啟 VS Code：  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure></li></ol><p>這樣雖然能開啟專案，但每次都要重複這些步驟，實在有點麻煩。  </p><p>👉 所以我們可以換個方式：只要把這些動作寫進一個「小工具」，就能省下許多時間。  </p><hr><h2 id="建立-open-project-bat"><a href="#建立-open-project-bat" class="headerlink" title="建立 open_project.bat"></a>建立 open_project.bat</h2><ol><li><p>打開記事本 (Notepad) 或任何文字編輯器。  </p></li><li><p>輸入以下內容：  </p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">REM Automatically open Bevy project in VS Code</span></span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br><span class="line">code .</span><br></pre></td></tr></table></figure></li><li><p>存檔時，檔名取為 <strong>open_project.bat</strong>，並放在專案根目錄：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\BevyProject\my_bevy_game\open_project.bat</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>只要在檔案總管裡 <strong>雙擊 <code>open_project.bat</code></strong>，<br>它就會自動執行以下動作：</p><ol><li>切換到該批次檔所在的資料夾 (<code>%~dp0</code> 代表批次檔的路徑)。  </li><li>開啟 Visual Studio Code，並載入該資料夾作為專案。</li></ol><hr><h2 id="延伸應用：建立桌面捷徑"><a href="#延伸應用：建立桌面捷徑" class="headerlink" title="延伸應用：建立桌面捷徑"></a>延伸應用：建立桌面捷徑</h2><p>我們還能更進一步，讓這個流程更方便。  </p><h3 id="建立捷徑的方法"><a href="#建立捷徑的方法" class="headerlink" title="建立捷徑的方法"></a>建立捷徑的方法</h3><ol><li><p>在檔案總管找到：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\BevyProject\my_bevy_game\open_project.bat</span><br></pre></td></tr></table></figure></li><li><p><strong>右鍵 → 建立捷徑</strong>。  </p></li><li><p>把產生的捷徑拖到桌面。  </p></li><li><p>可以重新命名這個捷徑，例如：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">開啟我的 Bevy 專案</span><br></pre></td></tr></table></figure></li></ol><p>這樣只要雙擊桌面圖示，就能開始開發了。  </p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>透過這個簡單的批次檔，我們讓原本要打好幾行指令的動作，變成了 <strong>雙擊一下</strong> 就能完成的操作。<br>實現了簡化開發流程的精神：<strong>一旦意識到重覆的操作，就是小工具該出場了~</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">簡單生活 讓生活簡單</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 遊戲開發教學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bevy </tag>
            
            <tag> Rust </tag>
            
            <tag> GameDev </tag>
            
            <tag> Windows </tag>
            
            <tag> 教學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Bevy-2] 使用 CMD 在 Windows 上建立第一個 Bevy 專案</title>
      <link href="/2025/09/29/bevy-create-project/"/>
      <url>/2025/09/29/bevy-create-project/</url>
      
        <content type="html"><![CDATA[<p>前一篇文章我們已經安裝好 <strong>Rust</strong> 與 <strong>Visual Studio C++ Build Tools</strong>。現在就來建立並執行你的第一個 <strong>Bevy 專案</strong>！</p><hr><span id="more"></span><blockquote><p>🎮 系列文章：  </p><ul><li><a href="/2025/09/29/bevy-setup-windows/">Part 1：Windows 上 Bevy 開發環境前置安裝教學 (CMD)</a>  </li><li><a href="/2025/09/29/bevy-create-project/">Part 2：使用 CMD 在 Windows 上建立第一個 Bevy 專案</a>  </li><li><a href="/2025/09/29/bevy-open-project-bat/">Part 3：使用批次檔快速開啟 Bevy 專案</a></li></ul></blockquote><hr><h2 id="步驟-1：建立-Bevy-專案"><a href="#步驟-1：建立-Bevy-專案" class="headerlink" title="步驟 1：建立 Bevy 專案"></a>步驟 1：建立 Bevy 專案</h2><ol><li>打開 CMD  </li><li>切換到專案資料夾所在的磁碟與路徑，例如：</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d E:\BevyProject</span><br></pre></td></tr></table></figure><ol start="3"><li>建立新的 Rust 專案：</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new my_bevy_game</span><br><span class="line"><span class="built_in">cd</span> my_bevy_game</span><br></pre></td></tr></table></figure><p>這會產生一個 <code>my_bevy_game</code> 資料夾，內含基本的 Rust 專案結構。</p><hr><h2 id="步驟-2：加入-Bevy-依賴"><a href="#步驟-2：加入-Bevy-依賴" class="headerlink" title="步驟 2：加入 Bevy 依賴"></a>步驟 2：加入 Bevy 依賴</h2><p>打開專案資料夾中的 <code>Cargo.toml</code>，在 <code>[dependencies]</code> 下加入：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">bevy</span> = <span class="string">&quot;0.14&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>建議隨時到 <a href="https://crates.io/crates/bevy">crates.io</a> 查詢 Bevy 最新版本號。</p></blockquote><hr><h2 id="步驟-3：撰寫第一個程式"><a href="#步驟-3：撰寫第一個程式" class="headerlink" title="步驟 3：撰寫第一個程式"></a>步驟 3：撰寫第一個程式</h2><p>編輯 <code>src/main.rs</code>，輸入以下程式碼：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> bevy::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    App::<span class="title function_ invoke__">new</span>()</span><br><span class="line">        .<span class="title function_ invoke__">add_plugins</span>(DefaultPlugins)</span><br><span class="line">        .<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="步驟-4：編譯與執行"><a href="#步驟-4：編譯與執行" class="headerlink" title="步驟 4：編譯與執行"></a>步驟 4：編譯與執行</h2><p>回到 CMD，輸入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p>如果一切正確，會跳出一個黑色視窗。這就是 Bevy 的遊戲主迴圈！</p><hr><h2 id="（選用）使用-VS-Code-開啟專案"><a href="#（選用）使用-VS-Code-開啟專案" class="headerlink" title="（選用）使用 VS Code 開啟專案"></a>（選用）使用 VS Code 開啟專案</h2><p>如果你使用 VS Code，可以在專案資料夾輸入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p>這樣就能更方便地進行開發。</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>到這裡你已經完成了：</p><ul><li>建立 Rust 專案  </li><li>加入 Bevy 引擎  </li><li>成功執行第一個遊戲視窗</li></ul><p>接下來你可以探索 Bevy 的官方範例，或開始編寫自己的遊戲邏輯 🎮</p>]]></content>
      
      
      <categories>
          
          <category> 遊戲開發教學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bevy </tag>
            
            <tag> Rust </tag>
            
            <tag> GameDev </tag>
            
            <tag> Windows </tag>
            
            <tag> 教學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Bevy-1] Windows 上 Bevy 開發環境前置安裝教學 (CMD)</title>
      <link href="/2025/09/29/bevy-setup-windows/"/>
      <url>/2025/09/29/bevy-setup-windows/</url>
      
        <content type="html"><![CDATA[<p>在開始建立 Bevy 專案之前，我們需要先在 <strong>Windows 平台</strong> 準備好開發環境。這份教學會帶你安裝 <strong>Rust</strong> 與 <strong>Visual Studio C++ Build Tools</strong>。</p><hr><span id="more"></span><blockquote><p>🎮 系列文章：  </p><ul><li><a href="/2025/09/29/bevy-setup-windows/">Part 1：Windows 上 Bevy 開發環境前置安裝教學 (CMD)</a>  </li><li><a href="/2025/09/29/bevy-create-project/">Part 2：使用 CMD 在 Windows 上建立第一個 Bevy 專案</a>  </li><li><a href="/2025/09/29/bevy-open-project-bat/">Part 3：使用批次檔快速開啟 Bevy 專案</a></li></ul></blockquote><hr><h2 id="步驟-0：安裝必要工具"><a href="#步驟-0：安裝必要工具" class="headerlink" title="步驟 0：安裝必要工具"></a>步驟 0：安裝必要工具</h2><h3 id="1-安裝-Rust"><a href="#1-安裝-Rust" class="headerlink" title="1. 安裝 Rust"></a>1. 安裝 Rust</h3><p>Bevy 是使用 <strong>Rust</strong> 開發的，因此第一步是安裝 Rust。</p><ul><li><strong>下載網址</strong>：<a href="https://www.rust-lang.org/tools/install">https://www.rust-lang.org/tools/install</a></li></ul><p>安裝完成後，打開 CMD，輸入以下指令確認是否安裝成功：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc --version</span><br></pre></td></tr></table></figure><p>如果能正常顯示版本號，代表 Rust 安裝成功。</p><hr><h3 id="2-安裝-Visual-Studio-C-Build-Tools"><a href="#2-安裝-Visual-Studio-C-Build-Tools" class="headerlink" title="2. 安裝 Visual Studio C++ Build Tools"></a>2. 安裝 Visual Studio C++ Build Tools</h3><p>Bevy 在 Windows 上需要 Visual Studio C++ Build Tools 提供的底層編譯工具。</p><ul><li><strong>下載網址</strong>：<a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">https://visualstudio.microsoft.com/visual-cpp-build-tools/</a></li></ul><h4 id="完整安裝方法（建議）"><a href="#完整安裝方法（建議）" class="headerlink" title="完整安裝方法（建議）"></a>完整安裝方法（建議）</h4><ol><li>執行安裝程式，進入 <strong>工作負載 (Workloads)</strong> 分頁  </li><li>勾選 <strong>使用 C++ 的桌面開發 (Desktop development with C++)</strong>  </li><li>點選 <strong>安裝 (Install)</strong></li></ol><h4 id="最小化安裝方法（僅安裝必要元件）"><a href="#最小化安裝方法（僅安裝必要元件）" class="headerlink" title="最小化安裝方法（僅安裝必要元件）"></a>最小化安裝方法（僅安裝必要元件）</h4><p>如果你想節省空間，可以只安裝必要的元件：  </p><ol><li>切換到 <strong>個別元件 (Individual components)</strong> 分頁  </li><li>勾選以下項目：  <ul><li>最新版本的 <strong>MSVC</strong>  </li><li>最新版本的 <strong>Windows SDK</strong>  </li><li><strong>C++ CMake tools for Windows</strong></li></ul></li><li>點選 <strong>安裝 (Install)</strong></li></ol><hr><p>完成以上步驟後，你就擁有了完整的 Bevy 開發環境基礎。接下來就能開始建立第一個專案 🚀</p>]]></content>
      
      
      <categories>
          
          <category> 遊戲開發教學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bevy </tag>
            
            <tag> Rust </tag>
            
            <tag> GameDev </tag>
            
            <tag> Windows </tag>
            
            <tag> 教學 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bevy 專案入門</title>
      <link href="/2025/09/26/bevy_project_analysis/"/>
      <url>/2025/09/26/bevy_project_analysis/</url>
      
        <content type="html"><![CDATA[<p>下面我會說明 Bevy 專案的程式碼，解釋其中幾個關鍵語法，像是 <code>cfg_attr</code>、<code>mod</code>、<code>pub</code> 和 <code>&amp;mut self</code>。依照 <strong>專案結構 + 程式碼流程</strong> 來解析，理解Bevy專案是如何運作的。</p><hr><h2 id="一、專案結構（從-mod-開始）"><a href="#一、專案結構（從-mod-開始）" class="headerlink" title="一、專案結構（從 mod 開始）"></a><strong>一、專案結構（從 <code>mod</code> 開始）</strong></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> asset_tracking;</span><br><span class="line"><span class="keyword">mod</span> audio;</span><br><span class="line"><span class="keyword">mod</span> demo;</span><br><span class="line"><span class="meta">#[cfg(feature = <span class="string">&quot;dev&quot;</span>)]</span></span><br><span class="line"><span class="keyword">mod</span> dev_tools;</span><br><span class="line"><span class="keyword">mod</span> menus;</span><br><span class="line"><span class="keyword">mod</span> screens;</span><br><span class="line"><span class="keyword">mod</span> theme;</span><br></pre></td></tr></table></figure><h3 id="1-mod"><a href="#1-mod" class="headerlink" title="1. mod"></a><strong>1. <code>mod</code></strong></h3><ul><li><code>mod</code> 用來宣告一個模組，對應到實際的 <strong>檔案或資料夾</strong>。</li><li>例如：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> audio;</span><br></pre></td></tr></table></figure>這表示會去找 <code>src/audio.rs</code> 或 <code>src/audio/mod.rs</code>，並把它們視為 <code>audio</code> 模組。</li></ul><p>這段程式碼代表整個專案分成以下幾個模組：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line"> ├─ asset_tracking.rs</span><br><span class="line"> ├─ audio.rs</span><br><span class="line"> ├─ demo.rs</span><br><span class="line"> ├─ dev_tools.rs (只有在 feature = &quot;dev&quot; 時才會編譯)</span><br><span class="line"> ├─ menus.rs</span><br><span class="line"> ├─ screens.rs</span><br><span class="line"> └─ theme.rs</span><br></pre></td></tr></table></figure><hr><h2 id="二、關鍵語法解釋"><a href="#二、關鍵語法解釋" class="headerlink" title="二、關鍵語法解釋"></a><strong>二、關鍵語法解釋</strong></h2><h3 id="1-cfg-attr"><a href="#1-cfg-attr" class="headerlink" title="1. cfg_attr"></a><strong>1. <code>cfg_attr</code></strong></h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![cfg_attr(bevy_lint, feature(register_tool), register_tool(bevy))]</span></span><br><span class="line"><span class="meta">#![cfg_attr(not(feature = <span class="string">&quot;dev&quot;</span>), windows_subsystem = <span class="string">&quot;windows&quot;</span>)]</span></span><br></pre></td></tr></table></figure><ul><li><code>cfg_attr</code> 是 Rust 的條件編譯語法，用來<strong>在特定條件下加上屬性（attribute）</strong>。</li><li>語法格式：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg_attr(條件, 要套用的屬性)]</span></span><br></pre></td></tr></table></figure></li><li>例子：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![cfg_attr(not(feature = <span class="string">&quot;dev&quot;</span>), windows_subsystem = <span class="string">&quot;windows&quot;</span>)]</span></span><br></pre></td></tr></table></figure><ul><li>如果 <strong>不是 dev 版本</strong>，就設定 <code>windows_subsystem = &quot;windows&quot;</code>  </li><li>這會在 Windows 平台執行時 <strong>隱藏終端視窗</strong>，讓遊戲像一般應用程式一樣啟動。</li></ul></li></ul><hr><h3 id="2-pub"><a href="#2-pub" class="headerlink" title="2. pub"></a><strong>2. <code>pub</code></strong></h3><ul><li><code>pub</code> 代表「公開」，讓其他模組可以使用這個項目。</li><li>例子：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">AppPlugin</span>;</span><br></pre></td></tr></table></figure>如果沒有 <code>pub</code>，就只能在 <strong>目前這個模組</strong> 使用，外部不能引用。</li></ul><hr><h3 id="3-mut-self"><a href="#3-mut-self" class="headerlink" title="3. &amp;mut self"></a><strong>3. <code>&amp;mut self</code></strong></h3><ul><li>在 Rust 裡，<code>self</code> 是指 <strong>物件本身</strong>。</li><li><code>&amp;mut self</code> 代表<strong>可變借用</strong>，可以修改物件內部的狀態。</li><li>在這裡用在 Bevy 的 <code>Plugin</code> 特徵（trait）中：<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">build</span>(&amp;<span class="keyword">self</span>, app: &amp;<span class="keyword">mut</span> App)</span><br></pre></td></tr></table></figure><ul><li><code>&amp;self</code> → <code>AppPlugin</code> 這個插件本身不會被修改</li><li><code>&amp;mut App</code> → <code>app</code> 是 Bevy 的遊戲核心，這裡允許修改 <code>app</code> 來<strong>加入系統和插件</strong></li></ul></li></ul><hr><h2 id="三、程式啟動流程"><a href="#三、程式啟動流程" class="headerlink" title="三、程式啟動流程"></a><strong>三、程式啟動流程</strong></h2><p>這裡的程式入口點是 <code>main()</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> AppExit &#123;</span><br><span class="line">    App::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">add_plugins</span>(AppPlugin).<span class="title function_ invoke__">run</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>建立 App 物件</strong> → <code>App::new()</code></li><li><strong>加入自訂插件</strong> → <code>.add_plugins(AppPlugin)</code></li><li><strong>開始執行遊戲主迴圈</strong> → <code>.run()</code></li></ol><p>這表示整個遊戲的邏輯都會被 <code>AppPlugin</code> 管理。</p><hr><h2 id="四、AppPlugin-負責什麼"><a href="#四、AppPlugin-負責什麼" class="headerlink" title="四、AppPlugin 負責什麼"></a><strong>四、AppPlugin 負責什麼</strong></h2><p><code>AppPlugin</code> 是一個自訂的插件，實作了 <code>Plugin</code> 這個特徵：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Plugin</span> <span class="keyword">for</span> <span class="title class_">AppPlugin</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">build</span>(&amp;<span class="keyword">self</span>, app: &amp;<span class="keyword">mut</span> App) &#123;</span><br><span class="line">        <span class="comment">// 1. 加入 Bevy 的內建插件</span></span><br><span class="line">        app.<span class="title function_ invoke__">add_plugins</span>(</span><br><span class="line">            DefaultPlugins</span><br><span class="line">                .<span class="title function_ invoke__">set</span>(AssetPlugin &#123;</span><br><span class="line">                    meta_check: AssetMetaCheck::Never,</span><br><span class="line">                    ..<span class="title function_ invoke__">default</span>()</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_ invoke__">set</span>(WindowPlugin &#123;</span><br><span class="line">                    primary_window: Window &#123;</span><br><span class="line">                        title: <span class="string">&quot;My Game&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">                        fit_canvas_to_parent: <span class="literal">true</span>,</span><br><span class="line">                        ..<span class="title function_ invoke__">default</span>()</span><br><span class="line">                    &#125;</span><br><span class="line">                    .<span class="title function_ invoke__">into</span>(),</span><br><span class="line">                    ..<span class="title function_ invoke__">default</span>()</span><br><span class="line">                &#125;),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 加入專案內自訂插件</span></span><br><span class="line">        app.<span class="title function_ invoke__">add_plugins</span>((</span><br><span class="line">            asset_tracking::plugin,</span><br><span class="line">            audio::plugin,</span><br><span class="line">            demo::plugin,</span><br><span class="line">            <span class="meta">#[cfg(feature = <span class="string">&quot;dev&quot;</span>)]</span></span><br><span class="line">            dev_tools::plugin,</span><br><span class="line">            menus::plugin,</span><br><span class="line">            screens::plugin,</span><br><span class="line">            theme::plugin,</span><br><span class="line">        ));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 系統更新順序管理</span></span><br><span class="line">        app.<span class="title function_ invoke__">configure_sets</span>(</span><br><span class="line">            Update,</span><br><span class="line">            (</span><br><span class="line">                AppSystems::TickTimers,</span><br><span class="line">                AppSystems::RecordInput,</span><br><span class="line">                AppSystems::Update,</span><br><span class="line">            )</span><br><span class="line">                .<span class="title function_ invoke__">chain</span>(),</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 初始化遊戲的 Pause 狀態</span></span><br><span class="line">        app.init_state::&lt;Pause&gt;();</span><br><span class="line">        app.<span class="title function_ invoke__">configure_sets</span>(Update, PausableSystems.<span class="title function_ invoke__">run_if</span>(<span class="title function_ invoke__">in_state</span>(<span class="title function_ invoke__">Pause</span>(<span class="literal">false</span>))));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 在遊戲啟動時建立 2D 攝影機</span></span><br><span class="line">        app.<span class="title function_ invoke__">add_systems</span>(Startup, spawn_camera);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、核心遊戲狀態管理"><a href="#五、核心遊戲狀態管理" class="headerlink" title="五、核心遊戲狀態管理"></a><strong>五、核心遊戲狀態管理</strong></h2><h3 id="1-遊戲暫停狀態-Pause"><a href="#1-遊戲暫停狀態-Pause" class="headerlink" title="1. 遊戲暫停狀態 Pause"></a><strong>1. 遊戲暫停狀態 <code>Pause</code></strong></h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(States, Copy, Clone, Eq, PartialEq, Hash, Debug, Default)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pause</span>(<span class="keyword">pub</span> <span class="type">bool</span>);</span><br></pre></td></tr></table></figure><ul><li><code>Pause(true)</code> &#x3D; 遊戲暫停</li><li><code>Pause(false)</code> &#x3D; 遊戲進行中</li></ul><p>Bevy 的狀態系統可以用來控制某些系統是否執行，例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_ invoke__">configure_sets</span>(Update, PausableSystems.<span class="title function_ invoke__">run_if</span>(<span class="title function_ invoke__">in_state</span>(<span class="title function_ invoke__">Pause</span>(<span class="literal">false</span>))));</span><br></pre></td></tr></table></figure><blockquote><p>當 <code>Pause(false)</code> 時，<code>PausableSystems</code> 這一組系統才會被執行。</p></blockquote><hr><h3 id="2-系統集合-SystemSet"><a href="#2-系統集合-SystemSet" class="headerlink" title="2. 系統集合 SystemSet"></a><strong>2. 系統集合 <code>SystemSet</code></strong></h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(SystemSet, Debug, Clone, Copy, Eq, PartialEq, Hash, PartialOrd, Ord)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">AppSystems</span> &#123;</span><br><span class="line">    TickTimers,</span><br><span class="line">    RecordInput,</span><br><span class="line">    Update,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個 Enum 代表遊戲的主要邏輯順序：</p><ol><li><strong>TickTimers</strong> → 計時器相關系統</li><li><strong>RecordInput</strong> → 玩家輸入記錄</li><li><strong>Update</strong> → 其他更新邏輯</li></ol><p><code>configure_sets(...chain())</code> 代表會依照上述順序執行。</p><hr><h2 id="六、建立-2D-攝影機"><a href="#六、建立-2D-攝影機" class="headerlink" title="六、建立 2D 攝影機"></a><strong>六、建立 2D 攝影機</strong></h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">spawn_camera</span>(<span class="keyword">mut</span> commands: Commands) &#123;</span><br><span class="line">    commands.<span class="title function_ invoke__">spawn</span>((Name::<span class="title function_ invoke__">new</span>(<span class="string">&quot;Camera&quot;</span>), Camera2d));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>這個系統會在遊戲啟動（<code>Startup</code>）時執行</li><li><code>Camera2d</code> 是 Bevy 內建的 2D 攝影機組件</li><li><code>commands.spawn</code> 用來在 ECS 中建立實體 (Entity)</li></ul><hr><h2 id="七、流程總結"><a href="#七、流程總結" class="headerlink" title="七、流程總結"></a><strong>七、流程總結</strong></h2><p>以下是遊戲啟動時的流程圖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">  │</span><br><span class="line">  ▼</span><br><span class="line">App::new()</span><br><span class="line">  │</span><br><span class="line">  ▼</span><br><span class="line">.add_plugins(AppPlugin)</span><br><span class="line">  │</span><br><span class="line">  └─&gt; AppPlugin.build(&amp;mut app)</span><br><span class="line">        │</span><br><span class="line">        ├─ 1. 加入 Bevy 的內建插件 (DefaultPlugins)</span><br><span class="line">        │</span><br><span class="line">        ├─ 2. 加入專案自訂插件 (audio, menus, theme...)</span><br><span class="line">        │</span><br><span class="line">        ├─ 3. 設定系統執行順序 (TickTimers -&gt; RecordInput -&gt; Update)</span><br><span class="line">        │</span><br><span class="line">        ├─ 4. 初始化遊戲狀態 Pause</span><br><span class="line">        │</span><br><span class="line">        └─ 5. Startup 時生成攝影機</span><br><span class="line">  │</span><br><span class="line">  ▼</span><br><span class="line">.run() → 啟動遊戲主迴圈</span><br></pre></td></tr></table></figure><hr><h2 id="八、總結"><a href="#八、總結" class="headerlink" title="八、總結"></a><strong>八、總結</strong></h2><table><thead><tr><th>語法</th><th>意義</th></tr></thead><tbody><tr><td><code>mod</code></td><td>宣告模組，對應到檔案或資料夾</td></tr><tr><td><code>pub</code></td><td>對外公開</td></tr><tr><td><code>&amp;mut self</code></td><td>可變借用，用於修改物件或 <code>app</code></td></tr><tr><td><code>cfg_attr</code></td><td>條件編譯，根據 feature 或平台決定是否啟用屬性</td></tr><tr><td><code>SystemSet</code></td><td>控制系統執行順序</td></tr><tr><td><code>States</code></td><td>控制遊戲狀態（例如暫停）</td></tr></tbody></table><blockquote><p>這個專案主要架構就是：</p><ul><li>透過 <strong>AppPlugin</strong> 來組合所有系統和插件  </li><li>用 <code>SystemSet</code> 和 <code>States</code> 管理遊戲邏輯  </li><li>在 <code>Startup</code> 時初始化基本場景（像攝影機）  </li><li>最後由 <code>run()</code> 進入主迴圈運行整個遊戲</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/30/hello-world/"/>
      <url>/2025/08/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
